{
	"info": {
		"_postman_id": "e58acf5c-18b5-4149-93a4-216b23971c7d",
		"name": "Sales Org v1 Contract Tests",
		"description": "This collection contains the contract tests for the Sales Org service API.  \nGenerated from the related OAS v1 definition.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "30539312-e58acf5c-18b5-4149-93a4-216b23971c7d"
	},
	"item": [
		{
			"name": "SalesOrgController",
			"item": [
				{
					"name": "Return SalesOrg by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/salesOrgs/:salesOrgCode - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate response time \npm.test(\"[GET]::/salesOrgs/:salesOrgCode - Response time is less than 300ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(300);\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"title\":\"salesOrg-v1\",\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":6},\"description\":{\"type\":\"string\"},\"alpha2\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":2},\"alpha3\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":3},\"status\":{\"type\":\"string\"},\"infraDetails\":{\"title\":\"infraDetails-v1\",\"type\":\"object\"}},\"required\":[\"code\",\"description\",\"alpha2\",\"alpha3\",\"status\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								],
								"id": "1a531ac7-549b-43a8-98db-03ef3ab08002"
							}
						}
					],
					"id": "ce78f94c-dffe-4cff-b1a5-4df5a848a408",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"salesOrgs",
								":salesOrgCode"
							],
							"variable": [
								{
									"id": "dc14c0c0-3197-493e-ac74-099da54f3c74",
									"key": "salesOrgCode",
									"value": "C00001",
									"description": "(Required) SalesOrg identifier code"
								}
							]
						},
						"description": "Return SalesOrg by code\n\nPossible error codes:\n- SOR-001"
					},
					"response": [
						{
							"id": "d9dfab4f-a45b-4bbe-a7f6-9d3a00ae43ad",
							"name": "Example response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "dc14c0c0-3197-493e-ac74-099da54f3c74",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Return SalesOrg by code\n\nPossible error codes:\n- SOR-001"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
						},
						{
							"id": "db7fa4f9-68c2-462f-bd30-9ebb14eeb0e4",
							"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "dc14c0c0-3197-493e-ac74-099da54f3c74",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Return SalesOrg by code\n\nPossible error codes:\n- SOR-001"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
						}
					]
				},
				{
					"name": "Create new SalesOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate response time \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response time is less than 300ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(300);\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"title\":\"salesOrg-v1\",\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":6},\"description\":{\"type\":\"string\"},\"alpha2\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":2},\"alpha3\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":3},\"status\":{\"type\":\"string\"},\"infraDetails\":{\"title\":\"infraDetails-v1\",\"type\":\"object\"}},\"required\":[\"code\",\"description\",\"alpha2\",\"alpha3\",\"status\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								],
								"id": "c1736546-f5b9-4f49-baf4-cf601c7dea4a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
									"    if (!minValue) {",
									"        minValue = 6;",
									"        maxValue = 6;",
									"    }",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"pm.variables.set('randomString', randomString());"
								],
								"id": "d0fdbff0-372c-4b89-9a70-776b0e4f88b0"
							}
						}
					],
					"id": "96bbe17c-28d5-4e61-a08c-d714ecd80dfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"salesOrgs",
								":salesOrgCode"
							],
							"variable": [
								{
									"id": "7082c508-afbe-475a-8442-5ff2e48fcb17",
									"key": "salesOrgCode",
									"value": "{{randomString}}",
									"description": "(Required) SalesOrg identifier code"
								}
							]
						},
						"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
					},
					"response": [
						{
							"id": "5808f7a6-a125-4d36-9c94-f13beb545d57",
							"name": "Example response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "7082c508-afbe-475a-8442-5ff2e48fcb17",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
						},
						{
							"id": "3d1c946e-84d1-43b1-8ad1-29455d0de0d7",
							"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "7082c508-afbe-475a-8442-5ff2e48fcb17",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
						}
					]
				},
				{
					"name": "Update existing SalesOrg by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate response time \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response time is less than 300ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(300);\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"title\":\"salesOrg-v1\",\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":6},\"description\":{\"type\":\"string\"},\"alpha2\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":2},\"alpha3\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":3},\"status\":{\"type\":\"string\"},\"infraDetails\":{\"title\":\"infraDetails-v1\",\"type\":\"object\"}},\"required\":[\"code\",\"description\",\"alpha2\",\"alpha3\",\"status\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								],
								"id": "f830c205-08cf-466a-87fe-53886e5da353"
							}
						}
					],
					"id": "31a9ef41-7cd9-4a08-abde-659c956423d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"salesOrgs",
								":salesOrgCode"
							],
							"variable": [
								{
									"id": "fcd4637a-2292-41de-b1eb-9f6ee8a020f6",
									"key": "salesOrgCode",
									"value": "C00001",
									"description": "(Required) SalesOrg identifier code"
								}
							]
						},
						"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
					},
					"response": [
						{
							"id": "205a677d-3c99-44cd-851a-a4fd937ac319",
							"name": "Example response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "fcd4637a-2292-41de-b1eb-9f6ee8a020f6",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
						},
						{
							"id": "a753b382-ed57-42aa-846e-40be881e81fb",
							"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "fcd4637a-2292-41de-b1eb-9f6ee8a020f6",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
						}
					]
				},
				{
					"name": "Return all SalesOrgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/salesOrgs - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate response time \npm.test(\"[GET]::/salesOrgs - Response time is less than 300ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(300);\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/salesOrgs - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/salesOrgs - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"content\":{\"type\":\"array\",\"items\":{\"title\":\"salesOrg-v1\",\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":6},\"description\":{\"type\":\"string\"},\"alpha2\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":2},\"alpha3\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":3},\"status\":{\"type\":\"string\"},\"infraDetails\":{\"title\":\"infraDetails-v1\",\"type\":\"object\"}},\"required\":[\"code\",\"description\",\"alpha2\",\"alpha3\",\"status\"]}},\"pagination\":{\"title\":\"token-v1\",\"type\":\"object\",\"properties\":{\"token\":{\"type\":\"string\",\"description\":\"The token for the next page\"},\"size\":{\"type\":\"integer\",\"description\":\"the size of each page\"}},\"description\":\"Pagination metadata for token method \"}},\"required\":[\"content\",\"pagination\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/salesOrgs - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								],
								"id": "40483aa1-98e4-4921-9faf-bd0d0df00a1f"
							}
						}
					],
					"id": "b21a5d37-56f3-4658-b701-c179c211d88b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/salesOrgs?size=12&token=R1hWb092TVBsa3t9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"salesOrgs"
							],
							"query": [
								{
									"key": "size",
									"value": "12"
								},
								{
									"key": "token",
									"value": "R1hWb092TVBsa3t9"
								}
							]
						},
						"description": "Return all SalesOrgs"
					},
					"response": [
						{
							"id": "031d4137-4745-44d4-b7b2-74be1b615729",
							"name": "Example response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salesOrgs?size=12&token=R1hWb092TVBsa3t9",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs"
									],
									"query": [
										{
											"key": "size",
											"value": "12"
										},
										{
											"key": "token",
											"value": "R1hWb092TVBsa3t9"
										}
									]
								},
								"description": "Return all SalesOrgs"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"content\": [\n    {\n      \"code\": \"e\",\n      \"description\": \"sunt ut eu\",\n      \"alpha2\": \"ve\",\n      \"alpha3\": \"sun\",\n      \"status\": \"veniam ut ipsum\",\n      \"infraDetails\": {}\n    },\n    {\n      \"code\": \"irur\",\n      \"description\": \"nisi mollit\",\n      \"alpha2\": \"o\",\n      \"alpha3\": \"par\",\n      \"status\": \"dolor \",\n      \"infraDetails\": {}\n    }\n  ],\n  \"pagination\": {\n    \"token\": \"enim ut\",\n    \"size\": 59300132\n  }\n}"
						},
						{
							"id": "ed9c593f-769f-4ab6-bcc3-661994bf379b",
							"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/salesOrgs?size=12&token=R1hWb092TVBsa3t9",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs"
									],
									"query": [
										{
											"key": "size",
											"value": "12"
										},
										{
											"key": "token",
											"value": "R1hWb092TVBsa3t9"
										}
									]
								},
								"description": "Return all SalesOrgs"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
						}
					]
				}
			],
			"id": "43c447d3-752d-4854-bd5e-20c0dbecbec7",
			"description": "Sales Org Controller"
		},
		{
			"name": "Variation Tests",
			"item": [
				{
					"name": "SalesOrgController Variations",
					"item": [
						{
							"name": "Create new SalesOrg[Bad Request][required description]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "17190814-59e1-491e-8962-f4a620a142ef"
									}
								}
							],
							"id": "605dad20-f947-4b36-a6d0-64439bf7f5ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "c5e59600-d5db-4844-ad9e-606109563c79",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "1b533368-00f4-48a5-8a01-3f102b487ee5",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "c5e59600-d5db-4844-ad9e-606109563c79",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "ecec0aa3-e92b-4a45-ad6d-a05025a369bc",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "c5e59600-d5db-4844-ad9e-606109563c79",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][required alpha2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "7b3aab90-cf9a-4ae4-9df0-72f15082b303"
									}
								}
							],
							"id": "c0c8c9fc-2c2e-4f3d-8d12-4124ef57f5f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "d7a410a8-7b62-4bd8-9e4d-cf6a8bc6b2ce",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "e593d814-0357-4d16-98ce-1b91edf53d07",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "d7a410a8-7b62-4bd8-9e4d-cf6a8bc6b2ce",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "ff67185c-4714-4805-8d82-31805a23c16d",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "d7a410a8-7b62-4bd8-9e4d-cf6a8bc6b2ce",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][required alpha3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "8d8e6113-6c59-42fd-8800-8feb4fe0e5c6"
									}
								}
							],
							"id": "ca34b11b-5ff8-42ab-8a97-f071d22bf6b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "f734def9-43ba-4d03-b2af-1eeafb7686c8",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "6386f344-90bc-465e-95d5-7385eadfb3c3",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "f734def9-43ba-4d03-b2af-1eeafb7686c8",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "267392c6-3f33-43ff-b721-87a45e9cdaf1",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "f734def9-43ba-4d03-b2af-1eeafb7686c8",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][required status]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "ebc65241-3834-4f81-83d8-54ccbcd88c41"
									}
								}
							],
							"id": "f9ac2038-60bd-427e-af92-e4b2e6da3840",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "12c1a675-aef8-4a61-8c90-b327df6458b9",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "5301f127-da11-4c6b-b6da-d1306edf62b6",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "12c1a675-aef8-4a61-8c90-b327df6458b9",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "60166b2c-212f-4056-81bc-469d5ccd1c80",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"pr\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "12c1a675-aef8-4a61-8c90-b327df6458b9",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][minimum length alpha2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "6eb4166f-b09e-4b34-a3cc-cad227278915"
									}
								}
							],
							"id": "135515c2-37c3-4768-8402-bdd48bb7e1a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "596412b6-18af-4a7c-86e3-4e72712017cc",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "5bea979f-5cc0-4fce-92f0-4ce852627b2d",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "596412b6-18af-4a7c-86e3-4e72712017cc",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "3c74eff5-689c-4e5b-8b96-137d9f80b908",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "596412b6-18af-4a7c-86e3-4e72712017cc",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][minimum length alpha3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "792b54cf-319f-46f7-8092-27e2f281f0f1"
									}
								}
							],
							"id": "963a8ab6-8efc-4974-abc6-875355e705cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "6f51455c-581d-42f7-892c-089a54d3c93d",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "9877d1e0-2f9d-4eba-b10e-c77284594e31",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "6f51455c-581d-42f7-892c-089a54d3c93d",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "189a795f-6e46-4c31-9c06-e22758ca9903",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "6f51455c-581d-42f7-892c-089a54d3c93d",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][maximum length alpha2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "b112d87b-ea97-4e28-aef1-2fd4d29f0f35"
									}
								}
							],
							"id": "3bb765a2-f649-4b4b-8b3a-218ac0949cce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"aua\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "577b5ffa-9b93-4fe6-8973-75ab68e3f0ea",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "3cf0305c-bce3-41dd-bc77-67b793c14b5a",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"aua\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "577b5ffa-9b93-4fe6-8973-75ab68e3f0ea",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "d45e1137-bfa3-4846-8c71-43301fbc0b2a",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"aua\",\n    \"alpha3\": \"pr\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "577b5ffa-9b93-4fe6-8973-75ab68e3f0ea",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Create new SalesOrg[Bad Request][maximum length alpha3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "d67aeb55-abb9-44be-9853-f2ef6c19c257"
									}
								}
							],
							"id": "22dc5dd1-85a9-4bd7-90a3-df477235ecd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"prpp\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "fc66c456-4b60-4446-ad58-87c2598329e9",
											"key": "salesOrgCode",
											"value": "{{randomString}}",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
							},
							"response": [
								{
									"id": "b0f90f25-f1d5-4aee-b9d8-485d8b3cbebd",
									"name": "Example response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"prpp\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "fc66c456-4b60-4446-ad58-87c2598329e9",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "19f42aa1-e1cb-4286-a4fc-0366f107f49d",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"sunt in\",\n    \"alpha2\": \"au\",\n    \"alpha3\": \"prpp\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "fc66c456-4b60-4446-ad58-87c2598329e9",
													"key": "salesOrgCode",
													"value": "{{randomString}}",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Creates a new SalesOrg based on the request body\n\nPossible error codes:\n- SOR-000\n- SOR-002"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						}
					],
					"id": "fee884ad-d293-43bd-9672-1d1e8c30dce6"
				},
				{
					"name": "Sales Org v1 Contract Tests Variations",
					"item": [
						{
							"name": "Update existing SalesOrg by code[Bad Request][minimum length alpha2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "967bc98d-99a6-4790-ab89-289588446747"
									}
								}
							],
							"id": "311c6a09-368d-406f-9c60-9af82c38ba30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "a1ea3071-22d8-43c9-a39a-f30d0ee6e4f5",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"response": [
								{
									"id": "acc85473-a1d2-47e6-96b6-d5c6762c0623",
									"name": "Example response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "a1ea3071-22d8-43c9-a39a-f30d0ee6e4f5",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "25fd51f5-df21-439d-bb0b-203ef4504755",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "a1ea3071-22d8-43c9-a39a-f30d0ee6e4f5",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Update existing SalesOrg by code[Bad Request][minimum length alpha3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "ad163cdc-4360-41cc-88b0-327ddb2b847d"
									}
								}
							],
							"id": "e2de2ae6-5f87-4445-b917-625b0a8c7bd4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "d9acf409-7b86-4267-9eac-9ae7a635b9d0",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"response": [
								{
									"id": "4ecddc0f-9558-4062-953c-c2e657f9a8f5",
									"name": "Example response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "d9acf409-7b86-4267-9eac-9ae7a635b9d0",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "839d4f3d-253e-446d-87d9-77b9f4cec594",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "d9acf409-7b86-4267-9eac-9ae7a635b9d0",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Update existing SalesOrg by code[Bad Request][maximum length alpha2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "0ba0cb3d-9b41-46c4-a4c6-6f2c293b203b"
									}
								}
							],
							"id": "7ac47932-0514-47ac-bdf8-f173882484b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"UtU\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "f4c77bae-02db-43b3-a0a1-51dd7139e011",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"response": [
								{
									"id": "13f63b1e-fd3c-41a2-969c-7d4da0e7a2e4",
									"name": "Example response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"UtU\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "f4c77bae-02db-43b3-a0a1-51dd7139e011",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "181fe7b0-c272-47fe-9058-b31359c02c37",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"UtU\",\n    \"alpha3\": \"eu\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "f4c77bae-02db-43b3-a0a1-51dd7139e011",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						},
						{
							"name": "Update existing SalesOrg by code[Bad Request][maximum length alpha3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate response status code \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response status code is 400\", function () {\n    pm.expect(pm.response.code).to.equal(400);\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"title\":\"Errors With Error Code\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"description\":\"A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Bad Request\"},\"status\":{\"type\":\"integer\",\"format\":\"int32\",\"description\":\"The HTTP status code generated by the origin server for this occurrence of the problem.\",\"minimum\":100,\"example\":400},\"detail\":{\"type\":\"string\",\"description\":\"A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\",\"example\":\"Customer: '620069' not found\"},\"errorCode\":{\"type\":\"string\",\"description\":\"The error code of this problem\",\"example\":\"CSP-001\"},\"errorMetadata\":{\"type\":\"object\",\"description\":\"Specific metadata for the error code\"}},\"required\":[\"title\",\"status\",\"detail\",\"errorCode\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/salesOrgs/:salesOrgCode - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										],
										"id": "d8116cd3-5320-497b-81d9-b581495edf4d"
									}
								}
							],
							"id": "f908f677-5336-477b-8835-b52d435a4680",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"euee\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"salesOrgs",
										":salesOrgCode"
									],
									"variable": [
										{
											"id": "9fca4c7e-c461-4d06-a0f6-bb3fb01c3425",
											"key": "salesOrgCode",
											"value": "C00001",
											"description": "(Required) SalesOrg identifier code"
										}
									]
								},
								"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
							},
							"response": [
								{
									"id": "b3e22fd7-bdbc-491c-96e4-02f606459760",
									"name": "Example response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"euee\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "9fca4c7e-c461-4d06-a0f6-bb3fb01c3425",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"s\",\n  \"description\": \"officia nostrud do tempor ipsum\",\n  \"alpha2\": \"e\",\n  \"alpha3\": \"in\",\n  \"status\": \"ea in\",\n  \"infraDetails\": {}\n}"
								},
								{
									"id": "042737ce-43c4-4be5-a944-232e2fba968e",
									"name": "Bad request errors:\n\n- SOR-000 - Mandatory fields is not on the request body\n- SOR-001 - SalesOrg does not exist\n- SOR-002 - SalesOrg already exists\n- SOR-003 - SalesOrg not modified - No new data",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"alpha2\": \"Ut\",\n    \"alpha3\": \"euee\",\n    \"status\": \"ENABLED\",\n    \"infraDetails\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/salesOrgs/:salesOrgCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"salesOrgs",
												":salesOrgCode"
											],
											"variable": [
												{
													"id": "9fca4c7e-c461-4d06-a0f6-bb3fb01c3425",
													"key": "salesOrgCode",
													"value": "C00001",
													"description": "(Required) SalesOrg identifier code"
												}
											]
										},
										"description": "Updates an existing SalesOrg (by the sales org code in the path) based on the request body\n\nAt least one of the body fields must be not null\n\nPossible error codes:\n- SOR-000\n- SOR-001\n- SOR-003"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"SalesOrg 'X001' not found\",\n  \"errorCode\": \"SOR-001\",\n  \"errorMetadata\": {}\n}"
								}
							]
						}
					],
					"id": "5516cba9-5547-43e2-9b47-cc22f4f4f699"
				}
			],
			"id": "1b6ec5ac-8868-4b3d-8683-e506444fbe76"
		}
	],
	"variable": [
		{
			"id": "315a0f4e-3d2b-491b-9fe6-d7cd709f6963",
			"key": "baseUrl",
			"value": "http://localhost:3000/salesorgs/api/v1",
			"type": "string"
		}
	]
}